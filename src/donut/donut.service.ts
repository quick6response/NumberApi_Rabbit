import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { InjectVkApi } from 'nestjs-vk';
import {
  DonutSubscriptionContext,
  DonutWithdrawContext,
  getRandomId,
  Keyboard,
  VK,
} from 'vk-io';
import { MessagesSendParams } from 'vk-io/lib/api/schemas/params';
import { DonutSubscriptionPriceContext } from 'vk-io/lib/structures/contexts/donut-subscription-price';
import { VKChatsEnum } from '../common/config/vk.chats.config';
import { RabbitmqApiMainService } from '../common/rabbitmq/service/rabbitmq.api.main.service';
import { dateUtils } from '../common/utils/date.utils';
import { UserVkInterface, VkService } from '../vk/vk.service';
import { DonutUserEventDto } from './dto/donut.user.event.dto';

@Injectable()
export class DonutService {
  private readonly logger = new Logger(DonutService.name);

  constructor(
    @InjectVkApi() private readonly vk: VK,
    private readonly configService: ConfigService,
    private readonly vkHelpService: VkService,
    private readonly rabbitmqMainApiService: RabbitmqApiMainService,
  ) {}

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ —Å–µ—Ä–≤–∏—Å–æ–º
   */
  async subscriptionIssuance(data: DonutUserEventDto) {
    const user = await this.vkHelpService.getInfoUserVk(data.userId);
    const textChat = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @id${data.userId} (${user.first_name} ${
      user.last_name
    }) –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ VK Donut.
    \n–í—Ä–µ–º—è: ${dateUtils.getDateFormatNumber(data.date)}
    \n#donut_issuance #subscriptionIssuance #id${data.userId}`;
    const textUser = `&#129395; ${user.first_name}, –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ VK Donut!\n–û –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö –ø–æ–¥–ø–∏—Å–∫–∏, –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ [https://vk.com/@id_called-donut|—Å—Ç–∞—Ç—å–µ].\n–ï—â—ë —É –Ω–∞—Å –µ—Å—Ç—å –±–µ—Å–µ–¥–∞ –¥–ª—è –æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ VK Donut`;

    await this.sendMessageUser(user.id, textUser, {
      keyboard: this.getKeyboardAboutBenefits(),
    });
    await this.sendMessageChat(textChat, [VKChatsEnum.LOGS_CHAT_DEV]);
  }

  private getKeyboardAboutBenefits() {
    const builder = Keyboard.keyboard([
      // –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞
      [
        Keyboard.callbackButton({
          label: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –ø–æ–¥–ø–∏—Å–∫—É VK Donut',
          color: 'secondary',
          payload: {
            type: 'text',
            cmd: 'donut about',
          },
        }),
      ],
    ]).inline();
  }
  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ —Å–µ—Ä–≤–∏—Å–æ–º
   */
  async subscriptionExpired(data: DonutUserEventDto) {
    const user = await this.vkHelpService.getInfoUserVk(data.userId);
    const textChat = `–ü–æ–¥–ø–∏—Å–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @id${data.userId} (${
      user.first_name
    } ${user.last_name}) –±—ã–ª–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞.
    \n\n–í—Ä–µ–º—è: ${dateUtils.getDateFormatNumber(data.date)}
    \n\n#donut_Expired #subscriptionExpired #id${data.userId} #vk_id${data.userVkId}`;
    await this.sendMessageChat(textChat, [VKChatsEnum.LOGS_CHAT_DEV]);
  }

  // –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–∫ –¥–æ–Ω—É—Ç
  async create(ctx: DonutSubscriptionContext) {
    const date = Date.now();
    let errorSendRabbit = false;
    try {
      this.rabbitmqMainApiService.emit('donut.create', {
        userId: ctx.userId,
        amount: ctx.amount,
        amountWithoutFee: ctx.amountWithoutFee,
        json: ctx.toJSON(),
      });
    } catch (e) {
      this.logger.error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ RabbitMQ –æ –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.userId}`,
        e,
      );
      // –∑–∞–¥–µ—Ä–∂–∫–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º –ø–æ–ø—ã—Ç–∫–∏
      await new Promise((resolve) => setTimeout(resolve, 5000));
      try {
        this.rabbitmqMainApiService.emit('donut.create', {
          userId: ctx.userId,
          amount: ctx.amount,
          amountWithoutFee: ctx.amountWithoutFee,
          json: ctx.toJSON(),
        });
      } catch {
        errorSendRabbit = true;
        const textChatError = `‚Äº [${dateUtils.getDateFormatNumber(date)}] @id${
          ctx.userId
        } –æ—Ñ–æ—Ä–º–∏–ª –ø–æ–¥–ø–∏—Å–∫—É VK Donut, –Ω–æ —è –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ RabbitMQ.\n\n–°—É–º–º–∞: ${ctx.amount} (${ctx.amountWithoutFee} —Å –∫–æ–º–∏—Å—Å–∏–µ–π)\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: ${e}\n\n#donut_create_error #donutSubscriptionCreateError #vk_id${
          ctx.userId
        }`;
        await this.sendMessageChat(textChatError, [
          VKChatsEnum.LOGS_CHAT_DEV,
          VKChatsEnum.ADMIN_CHAT_DEV,
        ]);
      }
    }
    // —É –Ω–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ rabbit, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
    if (errorSendRabbit) {
      return;
    }

    let textChat;
    try {
      const user = await this.vkHelpService.getInfoUserVk(ctx.userId);

      textChat = this.getTextSuccessSubscription(date, ctx, user);
    } catch (err) {
      textChat = this.getTextSuccessSubscription(date, ctx);
    }

    await this.sendMessageChat(textChat, [
      VKChatsEnum.LOGS_CHAT_DEV,
      VKChatsEnum.ADMIN_CHAT_DEV,
    ]);
  }

  private getTextSuccessSubscription(
    date: number,
    ctx: DonutSubscriptionContext,
    user?: UserVkInterface,
  ) {
    return `[${dateUtils.getDateFormatNumber(date)}] &#129395; @id${
      ctx.userId
    } ${user ? `(${user.first_name} ${user.last_name})` : ''} –æ—Ñ–æ—Ä–º–∏–ª –ø–æ–¥–ø–∏—Å–∫—É VK Donut.\n\n–°—É–º–º–∞: ${ctx.amount} (${ctx.amountWithoutFee} —Å –∫–æ–º–∏—Å—Å–∏–µ–π)\n\n#donut_create #donutSubscriptionCreate #vk_id${
      ctx.userId
    }`;
  }
  async prolonged(ctx: DonutSubscriptionContext) {
    const date = new Date().toString();
    const user = await this.vkHelpService.getInfoUserVk(ctx.userId);
    const textUser = `&#129395; ${user.first_name}, –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ VK Donut! –í—Å–µ –í–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, —Ç–∞–∫–∂–µ –æ –Ω–∏—Ö –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ [https://vk.com/@id_called-donut|—Å—Ç–∞—Ç—å–µ].`;
    const textChat = `[${dateUtils.getDateFormatNumber(date)}] &#129395; @id${
      ctx.userId
    } (${user.first_name} ${
      user.last_name
    }) –ø—Ä–æ–¥–ª–∏–ª –ø–æ–¥–ø–∏—Å–∫—É VK Donut.\n#donut_prolonged #donutSubscriptionProlonged #id${
      ctx.userId
    }`;
    // await this.sendMessageUser(user.id, textUser);
    await this.sendMessageChat(textChat);

    this.rabbitmqMainApiService.emit('donut.prolonged', {
      userId: user.id,
      json: ctx.toJSON(),
    });
  }

  async expired(ctx: DonutSubscriptionContext) {
    const date = new Date().toString();
    const user = await this.vkHelpService.getInfoUserVk(ctx.userId);
    const textUser = `&#128553; ${user.first_name}, –ø–æ–¥–ø–∏—Å–∫–∞ VK Donut –∏—Å—Ç–µ–∫–ª–∞. –í—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –±—ã–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã.`;
    const textChat = `[${dateUtils.getDateFormatNumber(date)}] &#128553; @id${
      ctx.userId
    } (${user.first_name} ${
      user.last_name
    }) –∏—Å—Ç–µ–∫–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∞ VK Donut.\n#donut_expired #donutSubscriptionExpired #id${
      ctx.userId
    }`;
    // await this.sendMessageUser(user.id, textUser);
    await this.sendMessageChat(textChat);

    this.rabbitmqMainApiService.emit('donut.expired', {
      userId: user.id,
      json: ctx.toJSON(),
    });
  }

  async cancelled(ctx: DonutSubscriptionContext) {
    const date = new Date().toString();
    const user = await this.vkHelpService.getInfoUserVk(ctx.userId);
    const textUser = `üò¢ ${user.first_name}, –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É VK Donut. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–∞–º, —á—Ç–æ –í–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å ‚Äî –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–Ω–µ–º –ª—É—á—à–µ.\n–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.`;
    const textChat = `[${dateUtils.getDateFormatNumber(date)}] &#128553; @id${
      ctx.userId
    } (${user.first_name} ${
      user.last_name
    }) –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ VK Donut.\n#donut_cancelled #donutSubscription–°ancelled #id${
      ctx.userId
    }`;
    // await this.sendMessageUser(user.id, textUser);
    await this.sendMessageChat(textChat);

    this.rabbitmqMainApiService.emit('donut.expired', {
      userId: user.id,
      json: ctx.toJSON(),
    });
  }

  async moneyWithdraw(ctx: DonutWithdrawContext) {
    const date = new Date().toString();
    const textChat = `[${dateUtils.getDateFormatNumber(
      date,
    )}] ‚úÖüí∏ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ VK Donut –≤ —Ä–∞–∑–º–µ—Ä–µ ${
      ctx.amountWithoutFee
    } —Ä—É–±–ª–µ–π.\n#donut_money_withdraw #donutMoneyWithdraw`;
    await this.sendMessageChat(textChat);
  }

  async moneyWithdrawError(ctx: DonutWithdrawContext) {
    const date = new Date().toString();
    const textChat = `[${dateUtils.getDateFormatNumber(
      date,
    )}] ‚ùóüí∏ –æ—à–∏–±–∫–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ VK Donut, —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: ${
      ctx.reason
    }.\n#donut_money_withdraw_error #donutMoneyWithdrawError`;
    await this.sendMessageChat(textChat);
  }

  // todo –¥–æ–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥ –Ω–∞ –≤–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –≤–µ—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
  async subscriptionPriceChanged(ctx: DonutSubscriptionPriceContext) {
    const date = new Date().toString();
    const user = await this.vkHelpService.getInfoUserVk(ctx.userId);
    const textUser = `&#128553; ${user.first_name}, –ø–æ–¥–ø–∏—Å–∫–∞ VK Donut –∏—Å—Ç–µ–∫–ª–∞. –í—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –±—ã–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã.`;
    const textChat = `[${dateUtils.getDateFormatNumber(date)}] &#128553; @id${
      ctx.userId
    } (${user.first_name} ${
      user.last_name
    }) –∏—Å—Ç–µ–∫–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∞ VK Donut.\n#donut_subscription_price_changed #donutsubscriptionPriceChanged #id${
      ctx.userId
    }`;
    // await this.sendMessageUser(user.id, textUser);
    await this.sendMessageChat(textChat);
    this.rabbitmqMainApiService.emit('donut.subscriptionPriceChanged', {
      userId: user.id,
      json: ctx.toJSON(),
    });
  }

  private async sendMessageChat(
    text: string,
    chatIds: VKChatsEnum[] = [VKChatsEnum.LOGS_CHAT_DEV],
    options?: MessagesSendParams,
  ) {
    const peersId = chatIds.map((chatId) => 2e9 + chatId);
    try {
      return this.vk.api.messages.send({
        message: text,
        random_id: getRandomId(),
        disable_mentions: true,
        peer_ids: peersId,
        ...options,
      });
    } catch (error) {
      return this.vk.api.messages.send({
        message: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ–Ω–∞—Ç–µ. ${error?.message}`,
        chat_id: VKChatsEnum.LOGS_CHAT_DEV,
        random_id: getRandomId(),
        disable_mentions: false,
      });
    }
  }

  private async sendMessageUser(
    userId: number,
    text: string,
    options?: MessagesSendParams,
  ) {
    try {
      // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∏—Å–∞—Ç—å
      const isMessageUser =
        await this.vk.api.messages.isMessagesFromGroupAllowed({
          user_id: userId,
          group_id: this.configService.get('VK_GROUP_ID'),
        });
      if (!isMessageUser.is_allowed) return;
      return this.vk.api.messages.send({
        message: text,
        user_id: userId,
        random_id: getRandomId(),
        ...options,
      });
    } catch (error) {
      return this.vk.api.messages.send({
        message: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ–Ω–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @id${userId}. ${error?.message}`,
        chat_id: VKChatsEnum.LOGS_CHAT_DEV,
        random_id: getRandomId(),
      });
    }
  }
}
